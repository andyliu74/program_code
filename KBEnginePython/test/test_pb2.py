# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: test.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='test.proto',
  package='',
  serialized_pb=_b('\n\ntest.proto\"&\n\x07\x43\x44\x65vice\x12\r\n\x05\x64\x65vId\x18\x01 \x01(\x05\x12\x0c\n\x04name\x18\x02 \x01(\t')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CDEVICE = _descriptor.Descriptor(
  name='CDevice',
  full_name='CDevice',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='devId', full_name='CDevice.devId', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='CDevice.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=14,
  serialized_end=52,
)

DESCRIPTOR.message_types_by_name['CDevice'] = _CDEVICE

CDevice = _reflection.GeneratedProtocolMessageType('CDevice', (_message.Message,), dict(
  DESCRIPTOR = _CDEVICE,
  __module__ = 'test_pb2'
  # @@protoc_insertion_point(class_scope:CDevice)
  ))
_sym_db.RegisterMessage(CDevice)


# @@protoc_insertion_point(module_scope)
